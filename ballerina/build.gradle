/*
 * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'LDAP - Ballerina'

def packageName = "ldap"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    testCoverageParam = "--code-coverage --coverage-format=xml"
    langVersion = ballerinaLangVersion
    platform = "java21"
}

configurations {
    externalJars
    jbalTools
    ballerinaStdLibs
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    externalJars(group: 'com.unboundid', name: 'unboundid-ldapsdk', version: "${unboundIdLdapVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newBallerinaToml = newBallerinaToml.replace("@toml.version@", tomlVersion)
        newBallerinaToml = newBallerinaToml.replace("@unboundIdLdap.version@", project.unboundIdLdapVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

clean {
    delete 'build'
}

task startLdapServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=my-openldap-container"
                standardOutput = stdOut
            }
            if (!stdOut.toString().contains("my-openldap-container")) {
                println "Starting LDAP server."
                exec {
                    commandLine 'sh', '-c', "docker compose -f $project.projectDir/tests/resources/openldap/compose.yml up -d"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 15s until the LDAP server get initiated."
                sleep(15 * 1000)
            } else {
                println "LDAP server is already started."
            }
        }
    }
}

task stopLdapServer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def stdOut = new ByteArrayOutputStream()
            exec {
                commandLine 'sh', '-c', "docker ps --filter name=my-openldap-container"
                standardOutput = stdOut
            }
            if (stdOut.toString().contains("my-openldap-container")) {
                println "Stopping LDAP server."
                exec {
                    commandLine 'sh', '-c', "docker stop my-openldap-container"
                    standardOutput = stdOut
                }
                println stdOut.toString()
                println "Waiting 5s until the LDAP server get stopped."
                sleep(5 * 1000)
            } else {
                println "LDAP server is not started."
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-ldap")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs
build.dependsOn copyToLib

test.dependsOn ":${packageName}-native:build"
test.dependsOn startLdapServer
test.finalizedBy stopLdapServer
build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
build.dependsOn startLdapServer
build.finalizedBy stopLdapServer

publishToMavenLocal.dependsOn build
publish.dependsOn build
